import React, { useState, useEffect } from 'react';

import Head from 'next/head'
import styles from '~/styles/Home.module.css'

import dynamic from 'next/dynamic'
import { getApi } from '~/lib/api';

import Navbar from '~/components/Navbar'
import Footer from '~/components/Footer'
import FormLocation from '~/components/FormLocation'
import Form from '~/components/FormMarker'
import useLocalStorage from '~/hooks/useLocalStorage';

function HomePage() {
  const [markers, setMarkers] = useState(null);
  const [users, setUsers] = useState(null);
  const [usersSelected, setUsersSelected] = useState([]);
  const [tags, setTags] = useState([]);
  const [temperature, setTemperature] = useState('0');
  const [idSelected, setIdSelected] = useState([]);
  const [filteredId, setFilteredId] = useState([]);
  const [weatherData, setWeatherData] = useState(null);
  const [initialCoordinates, setInitialCoordinates] = useState(null);

  const [token, setToken] = useLocalStorage<string>('token');

  if (token === '') {
    return (
      <div />
    )
  }

  if (markers === null) {
    if (token !== null) {
      getApi(token, 'api/markers', { filteredIds: filteredId })
        .then(data => {
          console.log(data);
          setMarkers(JSON.parse(data));
        })
    } else {
      // Se deja de esa forma para que userPositions.map no tire problemas
      setMarkers({ "userMarkers": [], "peopleMarkers": [] });
    }

    return (
      <div />
    )
  }

  if (users === null) {
    getApi(token, 'api/users/all', null)
      .then(data => {
        setUsers(JSON.parse(data));
      })

    return (
      <div />
    )
  }

  let coordinates = { lat: null, lng: null };

  navigator.geolocation.getCurrentPosition(function (position) {
    coordinates.lat = position.coords.latitude;
    coordinates.lng = position.coords.longitude;
  });

  if (weatherData === null) {
    getApi(token, 'api/weather', coordinates)
      .then(data => {
        const jsonData = JSON.parse(data);
        setWeatherData(jsonData["temp_c"]);
      })
  }

  // Se cargan los tags
  if (tags.length == 0) {
    getApi(token, 'api/tags/all', null)
      .then(data => {
        setTags(JSON.parse(data));
      })
  }

  const filter = () => {
    setFilteredId(idSelected);
    setMarkers(null);
  }

  const removeFilter = () => {
    setIdSelected([]);
    setUsersSelected([]);
    setFilteredId([]);
    setMarkers(null);
  }

  const selectedUser = (user) => {
    const userData = JSON.parse(user);
    if (idSelected.length < 5) {
      if (!idSelected.includes(userData.id)) {
        setUsersSelected([...usersSelected, userData]);
        setIdSelected([...idSelected, userData.id]);
      }
    }
  }

  const selectedUsers = usersSelected.map((user) => {
    return (
      <p className={styles.rowItem} key={user.id}>{user.name} {user.lastname}</p>
    )
  });

  const usersOptions = users.map((user) => {
    let exists = false;
    for (var i = 0; i < usersSelected.length; i++) {
      if (usersSelected[i].id == user.id) {
        exists = true;
        break;
      }
    }
    if (!exists) {
      const value = `{"id":${user.id},"name":"${user.firstname}","lastname":"${user.lastname}"}`;
      return (
        <option value={value} key={user.id}>{user.firstname} {user.lastname}</option>
      )
    }
  });

  const Map = dynamic(() => import('../components/Map'));

  return (
    <div className={styles.CenterContainer}>
      <Head>
        <title>PingToc</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar logged={token !== null} />
      {weatherData ?
        <div className={styles.centerContainer}>
          <h2>La temperatura actual es: {weatherData}Â°C</h2>
        </div>
        : <FormLocation
          token={token}
          setInitialCoordinates={setInitialCoordinates}
          temperature={temperature}
          setTemperature={setTemperature}
        />
      }

      {token ?
        <div>
          <h3 className={styles.centerContainer}>Usuarios seleccionados:</h3>
          <div className={styles.rowUsers}>
            {selectedUsers}
          </div>

          <div className={styles.flexContainer}>
            <select name="users" id="users" className={styles.selectDropdown} onChange={user => selectedUser(user.target.value)}>
              <option value="">Seleccionar usuario</option>
              {usersOptions}
            </select>

            <button className={styles.button} onClick={filter}>Filtrar</button>
            <button className={styles.button} onClick={removeFilter}>Eliminar filtros</button>
          </div>
        </div>
        : null}

      <Map markers={markers} initialCoordinates={initialCoordinates} />
      {token !== null ? <Form token={token} setMarkers={setMarkers} tags={tags} /> : null}

      <Footer />
    </div>
  )
}

export default HomePage
