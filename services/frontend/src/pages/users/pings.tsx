// import React, { useState } from 'react'
// import { useRouter } from 'next/router'

// import { getApi, patchApi } from '~/lib/api';

// import Head from 'next/head'

// import Navbar from '~/components/Navbar'
// import Footer from '~/components/Footer'

// import styles from '~/styles/Home.module.css'
// import useLocalStorage from '~/hooks/useLocalStorage';

// function PingsPage() {
//   const router = useRouter()

//   const [loading, setLoading] = useState(true);
//   const [pingsData, setPingsData] = useState(null);
//   const [user] = useLocalStorage<User>('user');
//   const [, setIdUserChat] = useLocalStorage<IdChat>('idChat');

//   if (user === undefined) {
//     return (
//       <div/>
//     )
//   }

//   if (loading) {
//     getApi(user.token, 'api/pings/all', null)
//       .then(data => {
//         console.log('%c Pings', 'color: orange')
//         const jsonData = JSON.parse(data)
//         console.table(jsonData.pingedUsers)
//         console.table(jsonData.usersPingedBy)
//         setPingsData(jsonData);

//         setLoading(false);
//       });

//     return (
//       <h2>Cargando</h2>
//     )
//   }

//   const visitToProfile = (user) => {
//     router.push({
//       pathname: '/users/profile',
//       query: { id: user.id },
//     })
//   }

//   const visitFromProfile = (user) => {
//     router.push({
//       pathname: '/users/profile',
//       query: { id: user.id },
//     })
//   }

//   const goingToChat = (userEmail) => {
//     setIdUserChat(userEmail)
//     window.location.assign('/chat')
//   }

//   const respondingPing = (answer, id) => {
//     patchApi(user.token, `/api/pings/update/${id}`, { status: answer })
//       .then(res => {
//         setLoading(true);
//       });
//   }

//   const pingsToUser = pingsData.usersPingedBy.map((ping) => {
//     console.log(ping)
//     if (ping.status == 0) {
//       return (
//         <div className={styles.row} key={ping.id}>
//           <p key={ping.id}><a className={styles.rowItemPress}
//             onClick={() => visitToProfile(ping.pingedFrom)}>{ping.pingedFrom.firstname} {ping.pingedFrom.lastname}</a> te ha hecho un ping
//           </p>
//           <button className={styles.button} onClick={() => respondingPing(1, ping.id)}>
//             Aceptar
//           </button>
//           <button className={styles.buttonReject} onClick={() => respondingPing(-1, ping.id)}>
//             Rechazar
//           </button>
//         </div>

//       )
//     } else {
//       return (
//         <div className={styles.row} key={ping.id}>
//           <p key={ping.id}>
//             <a className={styles.rowItemPress}
//               onClick={() => visitToProfile(ping.pingedFrom)}>{ping.pingedFrom.firstname} {ping.pingedFrom.lastname}
//             </a> 
//             te ha hecho un ping | {ping.status == 1 ? 'Aceptado' : 'Rechazado'}
//             {ping.status === 1 ? 
//             <a className={styles.button} href="/chat" onClick={() => goingToChat(ping.pingedFrom.email)}>
//               Chatear con {ping.pingedFrom.firstname} {ping.pingedFrom.lastname}
//             </a>
//           : null}
//           </p>
//         </div>
//       )
//     }

//   });

//   const pingsFromUser = pingsData.pingedUsers.map((ping) => {
//     return (
//       <div key={ping.id}>
//         <p> 
//           <a className={styles.rowItemPress} />
//             Has hecho un ping a <a className={styles.rowItemPress} onClick={() => visitFromProfile(ping.pingedTo)}>{ping.pingedTo.firstname} {ping.pingedTo.lastname}
//           </a>
//         </p>
//         {ping.status === 1 ? 
//           <a className={styles.button} href="/chat" onClick={() => goingToChat(ping.pingedTo.email)}>
//             Chatear con {ping.pingedTo.firstname} {ping.pingedTo.lastname}
//           </a>
//         : null}
//       </div>
//     )
//   });

//   return (
//     <div>
//       <Head>
//         <title>PingToc</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <Navbar logged={user.token !== null} />
//       <div>
//         <h2>Pings que te han hecho:</h2>
//         <div className={styles.column}>
//           {pingsToUser}
//         </div>

//         <h2>Pings que has hecho:</h2>
//         <div className={styles.column}>
//           {pingsFromUser}
//         </div>
//       </div>

//       <Footer />
//     </div>
//   )
// }

// export default PingsPage
import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router'

import { getApi, patchApi } from '../../lib/api';
import { useFormik } from 'formik';

import Head from 'next/head'

import Navbar from '../../components/Navbar'
import Footer from '../../components/Footer'

import styles from '../../styles/Home.module.css'

function PingsPage() {
  const router = useRouter()

  const [loading, setLoading] = useState(true);
  const [pingsData, setPingsData] = useState(null);
  const [token, setToken] = useState('');

  const formik = useFormik({
    initialValues: {
      day: '',
      hour: '',
      minute: '',
    },
    onSubmit: values => {
      if (values.day === '' || values.hour === '' || values.minute === '') {
        alert("Por favor, selecciona todos los campos para aprobar el ping");
        return 
      }
      console.log(values);
      // Formato {minuto|hora|díaMes|Mes|diaSemana}
      const cronString = `${values.minute} ${values.hour} * * ${values.day}`;
      console.log(cronString);
    },
  });

  const weekData = [
    {name: 'Todos los dias', value: '1-6'},
    {name: 'Lunes', value: '1'},
    {name: 'Martes', value: '2'},
    {name: 'Miércoles',  value: '3'},
    {name: 'Jueves', value: '4'},
    {name: 'Viernes', value: '5'},
    {name: 'Sabado', value: '6'},    
  ];

  const weekOptions = weekData.map((data, index) => {
    return (
      <option value={data.value} key={index}>{data.name}</option>
    )
  })

  const hourOptions = Array.from(Array(24).keys()).map(data => {
    return (
      <option value={data} key={data}>{data}</option>
    )
  })

  const minutesOptions = Array.from(Array(60).keys()).map(data => {
    return (
      <option value={data} key={data}>{data}</option>
    )
  })


  const CronForm = (ping) => {
    return (
      <form onSubmit={formik.handleSubmit}>
        <div className={styles.row}>
          <button className={styles.buttonReject} onClick={() => respondingPing(-1, ping.id)}> 
            Rechazar
          </button> 
          <select name="day" id="cronDay" className={styles.selectDropdown} onChange={formik.handleChange}>
            <option value="">Seleccionar día de la semana </option>
            {weekOptions}
          </select> 

          <select name="hour" id="cronHour" className={styles.selectDropdown} onChange={formik.handleChange}>
            <option value="">Seleccionar hora </option>
            {hourOptions}
          </select>

          <select name="minute" id="cronMinute" className={styles.selectDropdown} onChange={formik.handleChange}>
            <option value="">Seleccionar minuto </option>
            {minutesOptions} 
          </select>          
          <button className={styles.button} type="submit"> 
            Aceptar
          </button>
        </div>
      </form>
    )
  }

  useEffect(() => {
    const token = localStorage.getItem("token");
    setToken(token);
  }, []);

  if (token === '') {
    return (
      <div />
    )
  }

  if (loading) {
    getApi(token, 'api/pings/all', null) 
      .then(data => {
        setPingsData(JSON.parse(data));
        setLoading(false);
      });

    return (
      <h2>Cargando</h2>
    )
  }

  const visitToProfile = (user) => {
    router.push({
      pathname: '/users/profile',
      query: { id: user.id },
    })
  }

  const respondingPing = (answer, id) => {
    patchApi(token, `/api/pings/update/${id}`, { status: answer}) 
      .then(res => {
        setLoading(true);
      });
  }

  const pingsToUser = pingsData.usersPingedBy.map((ping) => {
    if (ping.status == 0) {      
      return (
        <div>
          <p key={ping.id}><a className={styles.rowItemPress} 
            onClick={() => visitToProfile(ping.pingedFrom)}>
            {ping.pingedFrom.firstname} {ping.pingedFrom.lastname}</a> te ha hecho un ping
          </p> 
          {CronForm(ping)}
        </div>
        
      ) 
    } else {
      return (
        <div className={styles.row}>
          <p key={ping.id}><a className={styles.rowItemPress} 
            onClick={() => visitToProfile(ping.pingedFrom)}>
            {ping.pingedFrom.firstname} {ping.pingedFrom.lastname}</a> te ha hecho un ping | {ping.status == 1 ? 'Aceptado' : 'Rechazado' }
          </p>
        </div>
      ) 
    }
    
  });

  const pingsFromUser = pingsData.pingedUsers.map((ping) => {
    return (
      <p key={ping.id}>
        <a className={styles.rowItemPress}></a>Has hecho un ping a <a className={styles.rowItemPress} 
        onClick={() => visitToProfile(ping.pingedTo)}>{ping.pingedTo.firstname} {ping.pingedTo.lastname}</a>
      </p>     
    )
  });

  return (
    <div>
      <Head>
          <title>PingToc</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
      </Head>
    
      <Navbar logged={token !== null}/>
      <div>
        <h2>Pings que te han hecho:</h2>
        <div className={styles.column}>
          {pingsToUser}
        </div>
        
        <h2>Pings que has hecho:</h2>
        <div className={styles.column}>
          {pingsFromUser}
        </div>
      </div>      
      
      <Footer />
    </div>
  )
}

export default PingsPage
